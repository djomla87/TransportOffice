//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spedicija
{
    using System;
    using System.Data;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    using System.Web;
    using System.Web.Script.Serialization;
    public partial class uvhszjiy_spedicijaEntities : DbContext
    {
        public uvhszjiy_spedicijaEntities()
            : base("name=uvhszjiy_spedicijaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<DnevnicaDetail> DnevnicaDetail { get; set; }
        public DbSet<DnevnikPrevoza> DnevnikPrevoza { get; set; }
        public DbSet<Dokument> Dokument { get; set; }
        public DbSet<Drzava> Drzava { get; set; }
        public DbSet<Grad> Grad { get; set; }
        public DbSet<Korisnik> Korisnik { get; set; }
        public DbSet<Log> Log { get; set; }
        public DbSet<NalogZaUtovar> NalogZaUtovar { get; set; }
        public DbSet<Subjekt> Subjekt { get; set; }
        public DbSet<Troskovi> Troskovi { get; set; }
        public DbSet<Valuta> Valuta { get; set; }
        public DbSet<VozacDnevnica> VozacDnevnica { get; set; }
        public DbSet<Vozaci> Vozaci { get; set; }
        public DbSet<Vozilo> Vozilo { get; set; }
        public DbSet<IzracunDnevnik> IzracunDnevnik { get; set; }
        public DbSet<IzracunZarada> IzracunZarada { get; set; }
        public DbSet<IzracunTrosak> IzracunTrosak { get; set; }
        public DbSet<Notes> Notes { get; set; }
        public DbSet<DnevnikCarina> DnevnikCarina { get; set; }
        public DbSet<DnevnikIstovar> DnevnikIstovar { get; set; }
        public DbSet<DnevnikUtovar> DnevnikUtovar { get; set; }
        public DbSet<DnevnikUvoznikIzvoznik> DnevnikUvoznikIzvoznik { get; set; }
        public DbSet<DnevnikValute> DnevnikValute { get; set; }
        public DbSet<KorisnikUpit> KorisnikUpit { get; set; }
        public DbSet<KorisnikNalog> KorisnikNalog { get; set; }
        public DbSet<VozacUser> VozacUser { get; set; }
        public DbSet<TipUsluge> TipUsluge { get; set; }
        public DbSet<AndroidTask> AndroidTask { get; set; }
        public DbSet<KorisnikNalogIstovar> KorisnikNalogIstovar { get; set; }
        public DbSet<KorisnikNalogUtovar> KorisnikNalogUtovar { get; set; }
        public DbSet<Ponuda> Ponuda { get; set; }
        public DbSet<PonudaUsloviPrevoza> PonudaUsloviPrevoza { get; set; }
        public DbSet<UsloviPrevoza> UsloviPrevoza { get; set; }
        public DbSet<AppPodesavanja> AppPodesavanja { get; set; }
        public DbSet<StatusPrevoza> StatusPrevoza { get; set; }
        public DbSet<VozacTroskovi> VozacTroskovi { get; set; }
        public DbSet<VozacVrstaTroskova> VozacVrstaTroskova { get; set; }
        public DbSet<StatusRobe> StatusRobe { get; set; }
        public DbSet<IDnevnikPrevozaVozac> IDnevnikPrevozaVozac { get; set; }
        public DbSet<RedoslijedUtovarIstovar> RedoslijedUtovarIstovar { get; set; }
        public DbSet<VoziloPodsjetnik> VoziloPodsjetnik { get; set; }
    
        public virtual ObjectResult<spVratiPodatkeZaNalog_Result> spVratiPodatkeZaNalog(Nullable<int> idNalog)
        {
            var idNalogParameter = idNalog.HasValue ?
                new ObjectParameter("IdNalog", idNalog) :
                new ObjectParameter("IdNalog", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spVratiPodatkeZaNalog_Result>("spVratiPodatkeZaNalog", idNalogParameter);
        }
    
        public virtual ObjectResult<VratiDnevnikCarinaPoIdDnevnik_Result> VratiDnevnikCarinaPoIdDnevnik(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiDnevnikCarinaPoIdDnevnik_Result>("VratiDnevnikCarinaPoIdDnevnik", idDnevnikParameter);
        }
    
        public virtual ObjectResult<VratiDnevnikIStovarPoIdDnevnik_Result> VratiDnevnikIStovarPoIdDnevnik(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiDnevnikIStovarPoIdDnevnik_Result>("VratiDnevnikIStovarPoIdDnevnik", idDnevnikParameter);
        }
    
        public virtual ObjectResult<VratiDnevnikPoId_Result> VratiDnevnikPoId(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiDnevnikPoId_Result>("VratiDnevnikPoId", idDnevnikParameter);
        }
    
        public virtual ObjectResult<VratiDnevnikUIPoIdDnevnik_Result> VratiDnevnikUIPoIdDnevnik(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiDnevnikUIPoIdDnevnik_Result>("VratiDnevnikUIPoIdDnevnik", idDnevnikParameter);
        }
    
        public virtual ObjectResult<VratiDnevnikUtovarPoIdDnevnik_Result> VratiDnevnikUtovarPoIdDnevnik(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiDnevnikUtovarPoIdDnevnik_Result>("VratiDnevnikUtovarPoIdDnevnik", idDnevnikParameter);
        }
    
        public virtual ObjectResult<VratiTroskovePoIdDnevnik_Result> VratiTroskovePoIdDnevnik(Nullable<int> idDnevnik)
        {
            var idDnevnikParameter = idDnevnik.HasValue ?
                new ObjectParameter("IdDnevnik", idDnevnik) :
                new ObjectParameter("IdDnevnik", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<VratiTroskovePoIdDnevnik_Result>("VratiTroskovePoIdDnevnik", idDnevnikParameter);
        }

        public override int SaveChanges()
        {

            var modifiedEntities = ChangeTracker.Entries().ToList();

            var izmjenjeni = modifiedEntities.Where(c => c.State == EntityState.Modified || c.State == EntityState.Deleted).ToList();
            var novi = modifiedEntities.Where(c => c.State == EntityState.Added).ToList();

            var now = DateTime.UtcNow;
            String StatusPromjene = "Standardna";
            bool pregledano = true;

            foreach (var change in izmjenjeni)
            {
                String entityName = change.Entity.GetType().Name.Split('_')[0];
                String Aktivnost = change.State.ToString();

                var objectStateEntry = ((IObjectContextAdapter)this).ObjectContext.ObjectStateManager.GetObjectStateEntry(change.Entity);
                var PK = objectStateEntry.EntityKey.EntityKeyValues[0].Value == null ? 0 : objectStateEntry.EntityKey.EntityKeyValues[0].Value;


                var ov = change.GetDatabaseValues().ToObject();
                var cv = change.State == EntityState.Deleted ? null : change.CurrentValues.ToObject();

                var originalValue = new JavaScriptSerializer().Serialize(ov).ToString();
                var currentValue = cv == null ? "" : new JavaScriptSerializer().Serialize(cv).ToString();

                if (entityName.Equals("DnevnikPrevoza"))
                {
                    DnevnikPrevoza original = (DnevnikPrevoza)ov;
                    DnevnikPrevoza trenutno = (DnevnikPrevoza)cv;

                    if (
                        original.CijenaPrevoza != trenutno.CijenaPrevoza ||
                        original.IdValuta != trenutno.IdValuta ||
                        original.CijenaPrevozaPrevoznika != trenutno.CijenaPrevozaPrevoznika ||
                        original.IdValutaPrevoznika != trenutno.IdValutaPrevoznika ||
                        original.SaPDV != trenutno.SaPDV
                        )
                    {
                        StatusPromjene = "Kritično";
                        pregledano = false;
                    }
                }

                if (originalValue != currentValue && !entityName.Equals("Log"))
                {
                    Log log = new Log
                    {
                        Aktivnost = Aktivnost,
                        Datum = DateTime.Now.AddHours(7),
                        IPAdresa = HttpContext.Current.Request.UserHostAddress,
                        KorisnickoIme = HttpContext.Current.User.Identity.Name,
                        NovaVrijednost = currentValue,
                        PK = Convert.ToInt32(PK),
                        StaraVrijednost = originalValue,
                        Tabela = entityName,
                        StatusPromjene = StatusPromjene,
                        Pregledano = pregledano
                    };

                    Log.Add(log);
                }
            }

            int rez = base.SaveChanges();


            if (novi.Count() > 0)
            {
                foreach (var change in novi)
                {
                    String entityName = change.Entity.GetType().Name.Split('_')[0];
                    String Aktivnost = "Added";

                    var objectStateEntry = ((IObjectContextAdapter)this).ObjectContext.ObjectStateManager.GetObjectStateEntry(change.Entity);
                    var PK = objectStateEntry.EntityKey.EntityKeyValues[0].Value == null ? 0 : objectStateEntry.EntityKey.EntityKeyValues[0].Value;

                    var originalValue = ""; // new JavaScriptSerializer().Serialize(change.OriginalValues.ToObject()).ToString();
                    var currentValue = new JavaScriptSerializer().Serialize(change.CurrentValues.ToObject()).ToString();

                    if (originalValue != currentValue && !entityName.Equals("Log"))
                    {
                        Log log = new Log
                        {
                            Aktivnost = Aktivnost,
                            Datum = DateTime.Now.AddHours(7),
                            IPAdresa = HttpContext.Current.Request.UserHostAddress,
                            KorisnickoIme = HttpContext.Current.User.Identity.Name,
                            NovaVrijednost = currentValue,
                            PK = Convert.ToInt32(PK),
                            StaraVrijednost = originalValue,
                            Tabela = entityName
                        };

                        Log.Add(log);
                    }
                }

                rez = base.SaveChanges();
            }

            return rez;
        }
    }
}
