<#@ template language="C#" HostSpecific="True" #>
<#
var Model = (MvcTextTemplateHost)Host;
var routePrefix = String.Empty;
if (!String.IsNullOrWhiteSpace(Model.AreaName)) {
    routePrefix = "/" + Model.AreaName;
}
routePrefix += "/" + Model.ControllerRootName + "/";
#>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Objects" #>
<#@ import namespace="System.Linq" #>
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using <#= Model.ContextType.Namespace #>.Models;

<# if(MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ModelType.Namespace)) { #>
using <#= Model.ModelType.Namespace #>;
<# } #>
<# if(Model.ContextType.Namespace != Model.ModelType.Namespace && MvcTextTemplateHost.NamespaceNeeded(Model.Namespace, Model.ContextType.Namespace)) { #>
using <#= Model.ContextType.Namespace #>;
<# } #>

namespace <#= Model.Namespace #>
{
<#
    var modelName = Model.ModelType.Name;
    var entitySetName = Model.EntitySetName;
    var modelVariable = modelName.ToLower();
    var entitySetVariable = entitySetName.ToLower();
    var primaryKey = Model.PrimaryKeys[0];
    var lambdaVar = modelVariable[0];
    var isObjectContext = typeof(ObjectContext).IsAssignableFrom(Model.ContextType);
	var len = Model.ModelType.GetProperties().Length;
#>
    public class <#= Model.ControllerName #> : Controller
    {
        private <#= Model.ContextType.Name #> db = new <#= Model.ContextType.Name #>();

        //
        // GET: <#= routePrefix #>

        public ActionResult Index()
        {
<#  var includeExpressions = "";
    if(isObjectContext) {
        includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include(\"{0}\")", property.PropertyName)));
    }
    else {
        includeExpressions = String.Join("", Model.RelatedProperties.Values.Select(property => String.Format(".Include({0} => {0}.{1})", lambdaVar, property.PropertyName)));
    }
#>
<# if(!String.IsNullOrEmpty(includeExpressions)) { #>
            var <#= entitySetVariable #> = db.<#= entitySetName #><#= includeExpressions #>;
            return View(<#= entitySetVariable #>.ToList());
<# } else { #>
            // return View(db.<#= entitySetName #><#= includeExpressions #>.ToList());
			 return View(new List<<#= entitySetName #>>());
<# } #>
        }

		// 
	 public ActionResult IndexAjax(jQueryDataTableParamModel param)
	 {
		 var list = db.<#= entitySetName #><#= includeExpressions #>.ToList();
         IEnumerable<<#= entitySetName #>> filteredList;

		<#	
							
		for (int i = 0; i < len; i++ ) { 
		if (!Model.ModelType.GetProperties()[i].GetGetMethod().IsVirtual) {
		#>
		var F<#= Model.ModelType.GetProperties()[i].Name #>  = Convert.ToString(Request["sSearch_<#= i #>"]).ToLower();
		<#
								    }
									}
		#>

        filteredList = list.Where(c =>	
		<#
		for (int i = 0; i < len; i++ ) {
		if (!Model.ModelType.GetProperties()[i].GetGetMethod().IsVirtual) {
		#>
		<# if(i > 0) { #> && <# }  #>  (String.IsNullOrEmpty("" + c.<#= Model.ModelType.GetProperties()[i].Name #> ) ? "" :  "" +  c.<#= Model.ModelType.GetProperties()[i].Name #>).ToLower().Contains(F<#= Model.ModelType.GetProperties()[i].Name #>) 
		<#
									   }
									   }
		#>
                                  );


            if (!string.IsNullOrEmpty(param.sSearch))
            {
                filteredList = filteredList.Where(c =>  
					<#
						for (int i = 0; i < len; i++ ) {
						if (!Model.ModelType.GetProperties()[i].GetGetMethod().IsVirtual) {
					#>
						<# if(i > 0) { #> || <# }  #>  (String.IsNullOrEmpty("" + c.<#= Model.ModelType.GetProperties()[i].Name #> ) ? "" :  "" +  c.<#= Model.ModelType.GetProperties()[i].Name #>).ToLower().Contains(param.sSearch.ToLower()) 
		
					<#
														}
														}
					#>
												);

            }

            var sortColumnIndex = Convert.ToInt32(Request["iSortCol_0"]);

            Func<<#= entitySetName #>, object> orderingFunction = c =>
            {
                switch (sortColumnIndex)
                {
				 <#
					for (int i = 0; i < len; i++ ) {
					if (!Model.ModelType.GetProperties()[i].GetGetMethod().IsVirtual) {
				#>
					case <#= i #>: return c.<#= Model.ModelType.GetProperties()[i].Name #>;
				<#
								    }
									}
				#>
					default: return c.<#= Model.ModelType.GetProperties()[0].Name #>;
                }
			};

            var sortDirection = Request["sSortDir_0"]; // asc or desc
            if (sortDirection == "asc")
                filteredList = filteredList.OrderBy(orderingFunction);
            else
                filteredList = filteredList.OrderByDescending(orderingFunction);

            var displayedList = filteredList.Skip(param.iDisplayStart).Take(param.iDisplayLength);
            var result = from c in displayedList select new object[] { 
			 <#
				for (int i = 0; i < len; i++ ) {
				if (!Model.ModelType.GetProperties()[i].GetGetMethod().IsVirtual) {
				if (Model.ModelType.GetProperties()[i].PropertyType == typeof(DateTime?) || Model.ModelType.GetProperties()[i].PropertyType == typeof(DateTime)) {
			#>
				String.IsNullOrEmpty("" + c.<#= Model.ModelType.GetProperties()[i].Name #>) ? "" :   DateTime.Parse(c.<#= Model.ModelType.GetProperties()[i].Name #>.ToString()).ToString("dd.MM.yyyy"),
			<#
			} else {
			#>
				c.<#= Model.ModelType.GetProperties()[i].Name #>,
			<#
								  }
									}
									}
			#>
					""
            };
            return Json(new
            {
                sEcho = param.sEcho,
                iTotalRecords = list.Count(),
                iTotalDisplayRecords = filteredList.Count(),
                aaData = result
            },
                        JsonRequestBehavior.AllowGet);

		}


        //
        // GET: <#= routePrefix #>Details/5

        public ActionResult Details(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= modelVariable #>);
        }

        //
        // GET: <#= routePrefix #>Create

        public ActionResult Create()
        {
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>");
<# } #>
            return View();
        }

        //
        // POST: <#= routePrefix #>Create

        [HttpPost]
        public ActionResult Create(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(primaryKey.Type == typeof(Guid)) { #>
                <#= modelVariable #>.<#= primaryKey.Name #> = Guid.NewGuid();
<# } #>
<# if(isObjectContext) { #>
                db.<#= entitySetName #>.AddObject(<#= modelVariable #>);
<# } else { #>
                db.<#= entitySetName #>.Add(<#= modelVariable #>);
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");
            }

<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: <#= routePrefix #>Edit/5

        public ActionResult Edit(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // POST: <#= routePrefix #>Edit/5

        [HttpPost]
        public ActionResult Edit(<#= modelName #> <#= modelVariable #>)
        {
            if (ModelState.IsValid)
            {
<# if(isObjectContext) { #>
                db.<#= entitySetName #>.Attach(<#= modelVariable #>);
                db.ObjectStateManager.ChangeObjectState(<#= modelVariable #>, EntityState.Modified);
<# } else { #>
                db.Entry(<#= modelVariable #>).State = EntityState.Modified;
<# } #>
                db.SaveChanges();
                return RedirectToAction("Index");
            }
<# foreach (var property in Model.RelatedProperties.Values) { #>
            ViewBag.<#= property.ForeignKeyPropertyName #> = new SelectList(db.<#= property.EntitySetName #>, "<#= property.PrimaryKey #>", "<#= property.DisplayPropertyName #>", <#= modelVariable #>.<#= property.ForeignKeyPropertyName #>);
<# } #>
            return View(<#= modelVariable #>);
        }

        //
        // GET: <#= routePrefix #>Delete/5

        public ActionResult Delete(<#= primaryKey.ShortTypeName #> id = <#= primaryKey.DefaultValue #>)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
<# } #>
            if (<#= modelVariable #> == null)
            {
                return HttpNotFound();
            }
            return View(<#= modelVariable #>);
        }

        //
        // POST: <#= routePrefix #>Delete/5

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(<#= primaryKey.ShortTypeName #> id)
        {
<# if(isObjectContext) { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Single(<#= lambdaVar #> => <#= lambdaVar #>.<#= primaryKey.Name #> == id);
            db.<#= entitySetName #>.DeleteObject(<#= modelVariable #>);
<# } else { #>
            <#= modelName #> <#= modelVariable #> = db.<#= entitySetName #>.Find(id);
            db.<#= entitySetName #>.Remove(<#= modelVariable #>);
<# } #>
            db.SaveChanges();
            return RedirectToAction("Index");
        }







        protected override void Dispose(bool disposing)
        {
            db.Dispose();
            base.Dispose(disposing);
        }
    }
}