<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
String [] niz  = mvcHost.ViewDataTypeName.Split('.');
String ControllerName = niz[niz.Length-1];
#>
@model <#= mvcHost.ViewDataTypeName #>
<#
// The following chained if-statement outputs the file header code and markup for a partial view, a content page, or a regular view.
if(mvcHost.IsPartialView) {
#>

<#
} else if(mvcHost.IsContentPage) {
#>

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
<#
if (!String.IsNullOrEmpty(mvcHost.MasterPageFile)) {
#>
    Layout = "<#= mvcHost.MasterPageFile#>";
<#
}
#>
}


<#
} else {
#>

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
    PushIndent("    ");
}
#>
<#
if (mvcHost.ReferenceScriptLibraries) {
#>
<#
    if (!mvcHost.IsContentPage) {
#>


<#
    }
}
#>


<script src="~/Content/js/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/Content/js/jquery-validation/dist/localization/messages_sr_lat.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {

	/*
	"date": true,
"required"	: true ,
"minlength"	: 3 ,
"maxlength"	: 4 ,
"email": true , 
"number": true ,
"digits": true ,
	*/


        var validator = $(".form").validate({
            rules: {
			
<#
int br = 0;
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
    if (!property.IsPrimaryKey && !property.IsReadOnly && property.Scaffold) {
	br ++;
#> 
		<# if (br > 1) { #>
		,
		<#
		}
		#> <#= property.Name #> : {
				"required" : true

<# if (property.UnderlyingType == typeof(Int32)) { #>
					, "digits": true 
<# } #>
<# if (property.UnderlyingType == typeof(decimal)) { #>
					, "number": true 
<# } #>
					}
<#
	}
	}
#>
						}
						 });

        $('submit').on('click', function (e) {
            e.preventDefault();

            if (!($(".form").valid())) {
                validator.focusInvalid();
            }
			else $(".form").submit();


        });
  });
</script> 

<link href="~/Content/css/datepicker.css" rel="stylesheet" />
<script src="~/Content/js/datepicker.js"></script>
<script src="~/Content/js/bootstrap-datepicker.sr-latin.js"></script>

<script type="text/javascript">
    $(function () {

        $('.datum').datepicker({
            language: 'sr-latin',
        format: "dd.mm.yyyy",
        todayBtn: "linked",
        autoclose: true,
        todayHighlight: true,
        toggleActive: true
    });
      

    });


</script> 




<section>  
<div class="container">      
    <div class="section-body ">         
        <div class="card card-bordered style-primary">
            <div class="card-head">
                			    <div class="tools">
								<div class="btn-group">
	                            <a class="btn btn-icon-toggle btn-refresh"><i class="md md-refresh"></i></a>
	                            <a class="btn btn-icon-toggle btn-collapse"><i class="fa fa-angle-down"></i></a>
	                            <a class="btn btn-icon-toggle btn-close"><i class="md md-close"></i></a>
                                </div>
							    </div>
							    <header><i class="fa fa-fw fa-edit"></i>&nbsp Izmjeni podatke </header>
			</div>



@using (Html.BeginForm("Edit", "<#= ControllerName #>", FormMethod.Post, new { @class = "form", role = "form" })) {
    @Html.ValidationSummary(true)

	<div class="card-body style-default-bright">


<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
    if (property.Scaffold) {
        if (property.IsPrimaryKey) {
#>
        @Html.HiddenFor(model => model.<#= property.Name #>)
<#
        } else if (!property.IsReadOnly) {
#>
         <div class="form-group floating-label">
<#
            if (property.IsForeignKey) {
#>

            @Html.DropDownList("<#= property.Name #>", String.Empty)
			@Html.LabelFor(model => model.<#= property.Name #>, "<#= property.AssociationName #>")

<#
            } else {

			if (property.UnderlyingType == typeof(DateTime)) 
					{
#>
			@Html.EditorFor(model => model.<#= property.Name #>, "DateTime")
			@Html.LabelFor(model => model.<#= property.Name #>)
<#
					}
			else {
#>
            @Html.TextBoxFor(model => model.<#= property.Name #>, new { @class = "form-control"  })
			@Html.LabelFor(model => model.<#= property.Name #>)
<#
            }
			}
#>
            @Html.ValidationMessageFor(model => model.<#= property.Name #>)
        </div>
           
<#
            } 
#>
            
<#
            }
			}
#>

        </div>
		     <div class="card-actionbar style-default-bright">
				<div class="card-actionbar-row">	
                          <input type="submit" value="KREIRAJ" class = "btn btn-flat btn-primary ink-reaction"  />
						 @Html.ActionLink("NAZAD NA LISTU", "Index", null, new { @class = "btn btn-flat btn-primary ink-reaction pull-left"  })
									</div>
			</div>

}
 </div>
    </div>
	</div>
    </section>



<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
    ClearIndent();
#>
</body>
</html>
<#
}
#>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>